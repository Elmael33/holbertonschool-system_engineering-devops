# Simple Web Infrastructure - One Server

## Overview

This infrastructure is designed to host a website accessible via **[www.foobar.com](http://www.foobar.com)**. It uses a **single server** that combines all necessary components to serve a fully functional web application.

---

## User Journey

1. A user opens their browser and types `www.foobar.com`.
2. The browser sends a DNS query to resolve the domain name.
3. The DNS server returns the IP address `8.8.8.8` associated with the domain.
4. The browser initiates an HTTP request to the server at `8.8.8.8`.
5. The server processes the request using:

   * Nginx as the web server
   * An application server (e.g., PHP-FPM, Node.js)
   * A MySQL database
6. The response (HTML, JSON, etc.) is sent back to the user.

---

## Components Used

### Domain Name:

* **foobar.com** has a `www` subdomain configured.
* The DNS entry for `www.foobar.com` is an **A record** pointing to **8.8.8.8**.

### Server @ 8.8.8.8

* **Web Server**: Nginx

  * Listens on port 80
  * Serves static files (HTML, CSS, JS)
  * Forwards dynamic requests to the application server

* **Application Server**

  * Handles backend logic (e.g., login, forms)
  * Processes dynamic requests from Nginx

* **Application Files**

  * The actual code base (e.g., PHP, Python, JavaScript)

* **Database (MySQL)**

  * Stores user data, product info, etc.
  * Used by the application server for data queries

### Communication

* The server communicates with the user's computer via the **HTTP protocol over TCP/IP**.

---

## Definitions

* **Server**: A physical or virtual machine that runs services and software.
* **Domain Name**: A human-readable address that maps to an IP address via DNS.
* **A Record**: A DNS record that maps a domain (e.g., [www.foobar.com](http://www.foobar.com)) to an IP address.
* **Web Server (Nginx)**: Manages HTTP requests and serves web content.
* **Application Server**: Executes business logic and interacts with the database.
* **Database**: Stores and retrieves application data.

---

## Diagram

```
User Browser
     |
     v
www.foobar.com --> DNS resolves to 8.8.8.8
     |
     v
+-------------------------------+
|         Single Server         |
|  IP: 8.8.8.8                  |
|                               |
|  [ Nginx (Web Server) ]       |
|           |                   |
|  [ Application Server ]       |
|           |                   |
|     [ MySQL Database ]        |
+-------------------------------+
```

---

## Limitations of This Architecture

* **SPOF (Single Point of Failure)**: If the server goes down, the entire site is unavailable.
* **Downtime During Maintenance**: Restarting services (e.g., for updates) causes site downtime.
* **No Scalability**: The server cannot handle high traffic alone. There's no way to scale horizontally.

---

## Conclusion

This infrastructure is simple and easy to deploy, ideal for small-scale or early-stage applications. However, it lacks redundancy, scalability, and high availability. It serves as a foundational example for more advanced distributed systems.
