# Distributed Web Infrastructure - Three Servers

## Overview

This infrastructure improves upon a simple single-server setup by distributing responsibilities across multiple servers. It introduces a load balancer and separates the application and database components for better performance and fault tolerance.

---

## User Journey

1. The user types `www.foobar.com` into their browser.
2. A DNS query is made, resolving `www.foobar.com` to an IP address.
3. The DNS returns an **A record** pointing to the public IP of the **load balancer**.
4. The browser sends an HTTP request to the load balancer.
5. The load balancer forwards the request to one of the backend web servers.
6. The web server serves static content or forwards the request to the application server.
7. The application server processes the request and interacts with the **Primary (Master)** or **Replica (Slave)** database node as needed.
8. The response is returned to the user through the same path.

---

## Components Used

### 1. Load Balancer (HAProxy)

* Accepts all incoming HTTP requests.
* Distributes traffic using algorithms like **Round Robin** or **Least Connections**.
* Improves performance and availability.

### 2. Web & Application Servers (2 Servers)

Each server includes:

* **Nginx (Web Server)**: Serves static content and forwards dynamic requests.
* **Application Server**: Processes logic and communicates with the database.
* **Application Codebase**: The actual files and backend logic.

### 3. MySQL Database (Primary-Replica Cluster)

* **Primary (Master)** node: Handles write operations.
* **Replica (Slave)** node: Handles read operations.
* Provides data redundancy and load sharing.

---

## DNS Configuration

* `www.foobar.com` uses an **A record** that maps to the public IP of the **load balancer**.

---

## Load Balancing Algorithm

* **Round Robin**: Requests are distributed equally in turn to each server.
* **Least Connections**: Sends requests to the server with the fewest active connections.

---

## Setup Type

* **Active-Active**: All servers handle traffic simultaneously for high availability.
* **Active-Passive** (alternative): One server is standby until failure of the active one.

---

## Diagram

```
User --> DNS --> Load Balancer (HAProxy)
                            |
            -----------------------------------
            |                                 |
     Web Server 1                      Web Server 2
     (Nginx + App + DB Client)         (Nginx + App + DB Client)
            |                                 |
       Reads/Writes                     Reads
            |                                 |
     Primary DB <---------------------> Replica DB
```

---

## Issues in this Architecture

* **SPOF (Single Point of Failure)**: The load balancer itself.
* **Security**: No firewalls, no HTTPS â€” system is vulnerable.
* **Monitoring**: No visibility into traffic, performance, or errors.

---

## Conclusion

This infrastructure significantly improves availability, scalability, and redundancy. However, it still contains weaknesses that need to be addressed: mainly the load balancer SPOF, lack of secure connections, and absence of monitoring.
