When a user wants to visit www.foobar.com, they type the domain name into their browser. 
The browser sends a DNS request to translate www.foobar.com into an IP address. The DNS 
server responds with the IP address of the load balancer. The browser then sends an HTTP/HTTPS 
request to the load balancer, which is configured with HAproxy.

The load balancer (HAproxy) is responsible for distributing incoming requests across the available servers. 
It ensures that traffic is balanced between servers and prevents any one server from becoming overloaded. 
In this case, it can be configured with a round-robin or least connections distribution algorithm, 
where each new request is forwarded to the server with the least number of active connections, or to the 
next server in the rotation. This helps ensure that no single server is overwhelmed with requests, 
improving the overall performance and availability of the website.

The load balancer uses an Active-Active setup, meaning all the web servers are active and can handle requests 
simultaneously. In an Active-Passive setup, one server would be idle (passive) until the active server fails. 
The Active-Active setup allows for better resource utilization and redundancy, ensuring that traffic is evenly 
distributed across multiple active servers.

There are two servers in this setup: the web server (Nginx) and the application server. The Nginx server listens 
for incoming HTTP/HTTPS requests and serves static content directly. For dynamic content, Nginx forwards the request 
to the application server, which runs the business logic of the website.

The application server processes requests and may interact with the database (MySQL) to retrieve or store data. 
The application server does not store any data locally but relies on the database to persist data, such as user 
profiles or product information.

The database is set up in a Primary-Replica (Master-Slave) configuration. The Primary node (Master) handles write 
requests (insertions, updates), while the Replica node (Slave) handles read requests (fetching data). The application 
server queries the Replica for data retrieval, ensuring that the Primary node is not overwhelmed with read queries, 
which improves performance.

This infrastructure improves the scalability and availability of the website. If one server fails, the load balancer 
can reroute traffic to the remaining active servers. However, this setup still has some potential SPOF (Single Point 
of Failure) issues. For example:
- If the load balancer fails, traffic cannot be routed to any of the web servers.
- There is no firewall or HTTPS configured in this infrastructure, which leaves the servers vulnerable to attacks 
  and data leaks.
- No monitoring system is in place to track performance or detect failures.

The main advantages of this setup are better traffic distribution, increased availability, and redundancy. 
However, potential SPOFs remain, and security and monitoring need to be addressed for better resilience.