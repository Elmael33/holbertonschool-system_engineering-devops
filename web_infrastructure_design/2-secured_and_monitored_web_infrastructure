# Secured and Monitored Web Infrastructure

## Overview

This infrastructure builds on the distributed setup by introducing essential security and observability tools: **firewalls**, **SSL encryption**, and **monitoring agents**. These additions protect the system and allow administrators to detect and fix issues proactively.

---

## User Journey

1. A user types `www.foobar.com` into their browser.
2. DNS resolves the name to the IP of the **load balancer**.
3. The userâ€™s request is made over **HTTPS**.
4. The load balancer has an **SSL certificate** and decrypts the request.
5. The request is passed to one of the web servers for processing.
6. The application server handles logic and database access.
7. The response is returned securely to the user.

---

## Infrastructure Components

### Load Balancer

* **SSL Termination**: Handles HTTPS and decrypts traffic.
* Uses algorithms like Round Robin or Least Connections.

### Web/Application Servers

* Serve static content (Nginx) and process backend logic.
* Connected to monitoring agents and protected by firewalls.

### MySQL Database

* Primary-Replica setup (not explicitly required but assumed for scaling).

### Firewalls (3 total)

* 1 before the Load Balancer
* 1 between Load Balancer and App Servers
* 1 between App Servers and DB

### SSL Certificate

* Encrypts traffic between the user and the load balancer.
* Prevents eavesdropping and man-in-the-middle attacks.

### Monitoring Clients

* Installed on all servers.
* Collect metrics (CPU, memory, QPS).
* Tools: Sumologic, Datadog, Prometheus, etc.

---

## Diagram

```
User <--HTTPS--> Load Balancer (SSL Termination)
                |    ^
         [Firewall #1]
                |
        -------------------
        |                 |
 Web/App Server 1    Web/App Server 2
   |       ^              |      ^
 [FW#2] [Mon]          [FW#2] [Mon]
   |                     |
  -----------------------------
               |
          [Firewall #3]
               |
           MySQL DB
            [Mon]
```

---

## Why Add These Components?

* **Firewalls**: Control traffic flow and protect each layer.
* **SSL**: Encrypts traffic to protect user data.
* **Monitoring**: Detects performance issues and alerts on problems.

---

## Monitoring QPS (Queries Per Second)

* Use monitoring agents to collect logs or metrics from the web server.
* Track the number of HTTP requests per second.
* Use tools like Prometheus + Grafana to visualize this.

---

## Issues with This Architecture

* **SSL Termination at LB**: Traffic between LB and app servers is unencrypted unless re-encrypted.
* **Single Write DB**: Only one MySQL node handles writes. If it goes down, writes are blocked.
* **Monolithic Servers**: Web, app, and DB all on same nodes can cause cascading failures.

---

## Conclusion

Security and monitoring are critical in any production infrastructure. This setup improves visibility and protection, but introduces new risks (e.g., LB SSL termination, single DB write point). Better segmentation and redundancy can improve resilience further.
