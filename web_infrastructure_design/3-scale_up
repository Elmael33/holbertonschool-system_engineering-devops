# Scale Up - Multi-Tiered Web Infrastructure

## Overview

This infrastructure builds on previous versions by introducing full separation of concerns: each component (web, app, DB) runs on its own server, and the load balancer is now clustered for high availability.

---

## User Journey

1. User types `www.foobar.com`.
2. DNS resolves the domain to the IP of the **load balancer cluster**.
3. The user sends an HTTPS request.
4. The clustered HAProxy LB handles the request and routes it to a web server.
5. The web server serves static files or forwards to the app server.
6. The app server processes business logic and queries the DB.
7. Response flows back to the user.

---

## Components

### 1. Load Balancer Cluster (HAProxy x2)

* Two HAProxy servers in failover mode.
* Provide fault tolerance and eliminate the LB SPOF.

### 2. Web Servers

* Serve static content.
* Forward dynamic requests to app servers.

### 3. Application Servers

* Execute backend logic.
* Communicate with the DB servers.

### 4. Database Servers

* Primary-Replica (optional but scalable).
* Handle persistent data storage.

---

## Diagram

```
         User --> DNS --> HAProxy LB Cluster
                        |           |
                  Web Server 1   Web Server 2
                        |           |
                 App Server 1   App Server 2
                        |           |
                        ---> MySQL Cluster
```

---

## Why Add These Elements?

* **HAProxy Cluster**: Removes single point of failure for LB.
* **Component Separation**: Each layer is isolated, improving performance and fault containment.
* **Dedicated Servers**: Allows scaling each part independently.

---

## Issues with This Setup

* Complexity increases (more infra to manage).
* Network latency can affect performance if not optimized.
* Requires orchestration or automation tools (e.g., Ansible, Docker).

---

## Conclusion

This design improves scalability, resilience, and performance. With clustered load balancers and tiered servers, the system can handle high traffic and avoid SPOFs. However, it introduces more complexity that must be managed carefully with proper tools and monitoring.
